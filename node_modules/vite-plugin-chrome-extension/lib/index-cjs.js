'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fs = require('fs-extra');
require('array-flat-polyfill');
var slash = require('slash');
var cheerio = require('cheerio');
var prettier = require('prettier');
var cosmiconfig = require('cosmiconfig');
var jsonpathPlus = require('jsonpath-plus');
var memoize = require('mem');
var glob = require('glob');
var get = require('lodash.get');
var diff = require('lodash.difference');
var Ajv = require('ajv');
var chalk = require('chalk');
var rollup = require('rollup');
var fs$1 = require('fs');
var flatten = require('lodash.flatten');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var slash__default = /*#__PURE__*/_interopDefaultLegacy(slash);
var cheerio__default = /*#__PURE__*/_interopDefaultLegacy(cheerio);
var prettier__default = /*#__PURE__*/_interopDefaultLegacy(prettier);
var memoize__default = /*#__PURE__*/_interopDefaultLegacy(memoize);
var glob__default = /*#__PURE__*/_interopDefaultLegacy(glob);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var diff__default = /*#__PURE__*/_interopDefaultLegacy(diff);
var Ajv__default = /*#__PURE__*/_interopDefaultLegacy(Ajv);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var flatten__default = /*#__PURE__*/_interopDefaultLegacy(flatten);

function _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }



const not = (fn) => (x) => !fn(x);

function isChunk(
    x,
) {
    return x && x.type === "chunk";
}

function isAsset(
    x,
) {
    return x.type === "asset";
}

function isString(x) {
    return typeof x === "string";
}

function isJsonFilePath(x) {
    return isString(x) && x.endsWith("json");
}

function getOutputFilenameFromChunk(sourceFileName, chunks) {
    const chunk = chunks.find(c => c.facadeModuleId && slash__default['default'](c.facadeModuleId) === slash__default['default'](sourceFileName));
    return slash__default['default'](_optionalChain$2([chunk, 'optionalAccess', _ => _.fileName]) || "");
}
function findChunkByName(name, bundle) {
    return Object.values(bundle).find(b => b.name && slash__default['default'](b.name) === slash__default['default'](name) && b.type === "chunk") ;
}
function findAssetByName(name, bundle) {
    return Object.values(bundle).find(b => b.name && slash__default['default'](b.name) === slash__default['default'](name) && b.type === "asset") ;
}
function findChunk(sourceFileName, chunks) {
    return Object.values(chunks).find(c => c.facadeModuleId && slash__default['default'](c.facadeModuleId) === slash__default['default'](sourceFileName));
}

/**
 * Update the manifest source in the output bundle
 */
const updateManifest = (
    updater

,
    bundle,
    handleError,
) => {
    try {
        const manifestKey = "manifest.json";
        const manifestAsset = bundle[manifestKey] ;

        if (!manifestAsset) {
            throw new Error(
                "No manifest.json in the rollup output bundle.",
            );
        }

        const manifest = JSON.parse(
            manifestAsset.source ,
        ) ;

        const result = updater(manifest);

        manifestAsset.source = JSON.stringify(result, undefined, 2);
    } catch (error) {
        if (handleError) {
            handleError(error.message);
        } else {
            throw error;
        }
    }

    return bundle;
};

const formatHtml = ($) =>
    prettier__default['default'].format($.html(), { parser: "html" });

const loadHtml = (rootPath) => (
    filePath,
) => {
    const htmlCode = fs__default['default'].readFileSync(filePath, "utf8");
    const $ = cheerio__default['default'].load(htmlCode);

    return Object.assign($, { filePath, rootPath });
};

const getRelativePath = ({
    filePath,
    rootPath,
}) => (p) => {
    const htmlFileDir = path__default['default'].dirname(filePath);

    let relDir;
    if (p.startsWith("/")) {
        relDir = path__default['default'].relative(process.cwd(), rootPath);
    } else {
        relDir = path__default['default'].relative(process.cwd(), htmlFileDir);
    }

    return path__default['default'].join(relDir, p);
};

/* -------------------- SCRIPTS -------------------- */

const getScriptElems = ($) =>
    $("script")
        .not("[data-rollup-asset]")
        .not('[src^="http:"]')
        .not('[src^="https:"]')
        .not('[src^="data:"]')
        .not('[src^="/"]');

const getScripts = ($) =>
    getScriptElems($).toArray();

const getScriptSrc = ($) =>
    getScripts($)
        .map((elem) => $(elem).attr("src"))
        .filter(isString)
        .map(getRelativePath($));

/* ----------------- ASSET SCRIPTS ----------------- */

const getAssets$1 = ($) =>
    $("script")
        .filter('[data-rollup-asset="true"]')
        .not('[src^="http:"]')
        .not('[src^="https:"]')
        .not('[src^="data:"]')
        .not('[src^="/"]')
        .toArray();

const getJsAssets = ($) =>
    getAssets$1($)
        .map((elem) => $(elem).attr("src"))
        .filter(isString)
        .map(getRelativePath($));

/* -------------------- css ------------------- */

const getCss = ($) =>
    $("link")
        .filter('[rel="stylesheet"]')
        .not('[href^="http:"]')
        .not('[href^="https:"]')
        .not('[href^="data:"]')
        .not('[href^="/"]')
        .toArray();

const getCssHrefs = ($) =>
    getCss($)
        .map((elem) => $(elem).attr("href"))
        .filter(isString)
        .map(getRelativePath($));

/* -------------------- img ------------------- */

const getImgs = ($) =>
    $("img")
        .not('[src^="http://"]')
        .not('[src^="https://"]')
        .not('[src^="data:"]')
        .toArray();

const getFavicons = ($) =>
    $('link[rel="icon"]')
        .not('[href^="http:"]')
        .not('[href^="https:"]')
        .not('[href^="data:"]')
        .toArray();

const getImgSrcs = ($) => {
    return [
        ...getImgs($).map((elem) => $(elem).attr("src")),
        ...getFavicons($).map((elem) => $(elem).attr("href")),
    ]
        .filter(isString)
        .map(getRelativePath($));
};

function generateHtml(
    context,
    htmls,
    chunks,
    options,
    srcDir,
) {
    htmls.map($ => replaceImportScriptPath($, chunks, srcDir, options.browserPolyfill))
        .map($ => {
            const source = formatHtml($);
            const fileName = path.relative(srcDir, $.filePath);
            context.emitFile({
                type: "asset",
                source, // String
                fileName,
        });
    });
}

function replaceImportScriptPath(
    $,
    chunks,
    srcDir,
    browserPolyfill,
) {
    getScriptElems($)
        .attr("type", "module")
        .attr("src", (i, value) => {
            const basePath = path.dirname($.filePath);
            const chunkName = getOutputFilenameFromChunk(path.resolve(basePath, value ), chunks);
            return path.relative(basePath, path.resolve(srcDir, chunkName));
        });

    if (browserPolyfill) {
        const head = $("head");
        if (
            browserPolyfill === true ||
            (typeof browserPolyfill === "object" &&
                browserPolyfill.executeScript)
        ) {
            head.prepend(
                '<script src="/assets/browser-polyfill-executeScript.js"></script>',
            );
        }

        head.prepend(
            '<script src="/assets/browser-polyfill.js"></script>',
        );
    }

    return $;
}

const name$1 = "html-inputs";

/* ============================================ */
/*                  HTML-INPUTS                 */
/* ============================================ */

function htmlInputs(
    htmlInputsOptions,
    /** Used for testing */
    cache = {
        scripts: [],
        html: [],
        html$: [],
        js: [],
        css: [],
        img: [],
        input: [],
    } ,
) {
    return {
        name: name$1,
        cache,

        generateBundle(options, bundle) {
            if (!cache.srcDir) {
                throw new TypeError("cache.srcDir not initialized");
            }
            const chunks = Object.values(bundle).filter(isChunk);
            generateHtml(this, cache.html$, chunks, htmlInputsOptions, cache.srcDir);
        },
    };
}

const cloneObject = (obj) => JSON.parse(JSON.stringify(obj));

const manifestName = "manifest.json";

function generateManifest(
    context,
    manifest,
) {
    const manifestJson = JSON.stringify(manifest, null, 4)
        // SMELL: is this necessary?
        .replace(/\.[jt]sx?"/g, '.js"');
    // Emit manifest.json
    context.emitFile({
        type: "asset",
        fileName: manifestName,
        source: manifestJson,
    });
}

const combinePerms = (
  ...permissions
) => {
  const { perms, xperms } = (permissions.flat(
    Infinity,
  ) )
    .filter((perm) => typeof perm !== "undefined")
    .reduce(
      ({ perms, xperms }, perm) => {
        if (perm.startsWith("!")) {
          xperms.add(perm.slice(1));
        } else {
          perms.add(perm);
        }

        return { perms, xperms };
      },
      { perms: new Set(), xperms: new Set() },
    );

  return [...perms].filter((p) => !xperms.has(p));
};

// /* ============================================ */
// /*                DERIVE MANIFEST               */
// /* ============================================ */

// export function deriveManifest(
//   manifest: ChromeExtensionManifest, // manifest.json
//   ...permissions: string[] | string[][] // will be combined with manifest.permissions
// ): ChromeExtensionManifest {
//   return validateManifest({
//     // SMELL: Is this necessary?
//     manifest_version: 2,
//     ...manifest,
//     permissions: combinePerms(permissions, manifest.permissions),
//   })
// }

/* -------------------------------------------- */
/*                 DERIVE FILES                 */
/* -------------------------------------------- */

function deriveFiles$1(
    manifest,
    srcDir,
) {
    // get resources from section web_accessible_resources
    const web_accessible_resources = get__default['default'](
        manifest,
        "web_accessible_resources",
        [] ,
    ).reduce((resource_paths, web_accessible_resource) =>
        web_accessible_resource.resources.reduce((r, x) => {
            if (glob__default['default'].hasMagic(x)) {
                const files = glob__default['default'].sync(x, { cwd: srcDir });
                return [...r, ...files.map((f) => f.replace(srcDir, ""))];
            } else {
                return [...r, x];
            }
        }, resource_paths),
    [] );

    /**
     * js files come from:
     *  - web_accessible_resources
     *  - background.service_worker
     *  - content_scripts
     */
    const js = [
        ...web_accessible_resources.filter((f) => /\.[jt]sx?$/.test(f)),
        get__default['default'](manifest, "background.service_worker"),
        ...get__default['default'](
            manifest,
            "content_scripts",
            [] ,
        ).reduce((r, { js = [] }) => [...r, ...js], [] ),
    ];

    /**
     * html files come from:
     *  - web_accessible_resources
     *  - options_page
     *  - options_ui.page
     *  - devtools_page
     *  - action.default_popup
     *  - chrome_url_overrides
     */
    const html = [
        ...web_accessible_resources.filter((f) => /\.html?$/.test(f)),
        get__default['default'](manifest, "options_page"),
        get__default['default'](manifest, "options_ui.page"),
        get__default['default'](manifest, "devtools_page"),
        get__default['default'](manifest, "action.default_popup"),
        ...Object.values(get__default['default'](manifest, "chrome_url_overrides", {})),
    ];

    /**
     * css files come from:
     *  - web_accessible_resources
     *  - content_scripts
     */
    const css = [
        ...web_accessible_resources.filter((f) => f.endsWith(".css")),
        ...get__default['default'](
            manifest,
            "content_scripts",
            [] ,
        ).reduce(
            (r, { css = [] }) => [...r, ...css],
            [] ,
        ),
    ];

    /**
     * action icons come from:
     *  - web_accessible_resources
     *  - content_scripts
     */
    const actionIconSet = new Set();
    const default_icons = get__default['default'](
        manifest,
        "action.default_icon",
        {} ,
    );
    if (typeof default_icons === "string") {
        actionIconSet.add(default_icons);
    } else {
        Object.values(default_icons).forEach((x) => actionIconSet.add(x));
    }

    /**
     * image files come from:
     *  - web_accessible_resources
     *  - action.default_icon
     *  - icons
     */
    const img = [
        ...actionIconSet,
        ...web_accessible_resources.filter((f) =>
            /\.(jpe?g|png|svg|tiff?|gif|webp|bmp|ico)$/i.test(f),
        ),
        ...Object.values(get__default['default'](manifest, "icons", {})),
    ];

    // Files like fonts, things that are not expected
    const others = diff__default['default'](web_accessible_resources, css, js, html, img);

    return {
        css: validate(css),
        js: validate(js),
        html: validate(html),
        img: validate(img),
        others: validate(others),
    };

    function validate(ary) {
        return [...new Set(ary.filter(isString))].map((x) =>
            path.join(srcDir, x),
        );
    }

    function isString(x) {
        return typeof x === "string";
    }
}

var id = "http://json-schema.org/draft-04/schema#";
var $schema$1 = "http://json-schema.org/draft-04/schema#";
var description = "Core schema meta-schema";
var definitions$1 = {
	schemaArray: {
		type: "array",
		minItems: 1,
		items: {
			$ref: "#"
		}
	},
	positiveInteger: {
		type: "integer",
		minimum: 0
	},
	positiveIntegerDefault0: {
		allOf: [
			{
				$ref: "#/definitions/positiveInteger"
			},
			{
				"default": 0
			}
		]
	},
	simpleTypes: {
		"enum": [
			"array",
			"boolean",
			"integer",
			"null",
			"number",
			"object",
			"string"
		]
	},
	stringArray: {
		type: "array",
		items: {
			type: "string"
		},
		minItems: 1,
		uniqueItems: true
	}
};
var type$1 = "object";
var properties$1 = {
	id: {
		type: "string"
	},
	$schema: {
		type: "string"
	},
	title: {
		type: "string"
	},
	description: {
		type: "string"
	},
	"default": {
	},
	multipleOf: {
		type: "number",
		minimum: 0,
		exclusiveMinimum: true
	},
	maximum: {
		type: "number"
	},
	exclusiveMaximum: {
		type: "boolean",
		"default": false
	},
	minimum: {
		type: "number"
	},
	exclusiveMinimum: {
		type: "boolean",
		"default": false
	},
	maxLength: {
		$ref: "#/definitions/positiveInteger"
	},
	minLength: {
		$ref: "#/definitions/positiveIntegerDefault0"
	},
	pattern: {
		type: "string",
		format: "regex"
	},
	additionalItems: {
		anyOf: [
			{
				type: "boolean"
			},
			{
				$ref: "#"
			}
		],
		"default": {
		}
	},
	items: {
		anyOf: [
			{
				$ref: "#"
			},
			{
				$ref: "#/definitions/schemaArray"
			}
		],
		"default": {
		}
	},
	maxItems: {
		$ref: "#/definitions/positiveInteger"
	},
	minItems: {
		$ref: "#/definitions/positiveIntegerDefault0"
	},
	uniqueItems: {
		type: "boolean",
		"default": false
	},
	maxProperties: {
		$ref: "#/definitions/positiveInteger"
	},
	minProperties: {
		$ref: "#/definitions/positiveIntegerDefault0"
	},
	required: {
		$ref: "#/definitions/stringArray"
	},
	additionalProperties: {
		anyOf: [
			{
				type: "boolean"
			},
			{
				$ref: "#"
			}
		],
		"default": {
		}
	},
	definitions: {
		type: "object",
		additionalProperties: {
			$ref: "#"
		},
		"default": {
		}
	},
	properties: {
		type: "object",
		additionalProperties: {
			$ref: "#"
		},
		"default": {
		}
	},
	patternProperties: {
		type: "object",
		additionalProperties: {
			$ref: "#"
		},
		"default": {
		}
	},
	dependencies: {
		type: "object",
		additionalProperties: {
			anyOf: [
				{
					$ref: "#"
				},
				{
					$ref: "#/definitions/stringArray"
				}
			]
		}
	},
	"enum": {
		type: "array",
		minItems: 1,
		uniqueItems: true
	},
	type: {
		anyOf: [
			{
				$ref: "#/definitions/simpleTypes"
			},
			{
				type: "array",
				items: {
					$ref: "#/definitions/simpleTypes"
				},
				minItems: 1,
				uniqueItems: true
			}
		]
	},
	format: {
		type: "string"
	},
	allOf: {
		$ref: "#/definitions/schemaArray"
	},
	anyOf: {
		$ref: "#/definitions/schemaArray"
	},
	oneOf: {
		$ref: "#/definitions/schemaArray"
	},
	not: {
		$ref: "#"
	}
};
var dependencies$1 = {
	exclusiveMaximum: [
		"maximum"
	],
	exclusiveMinimum: [
		"minimum"
	]
};
var jsonSchema = {
	id: id,
	$schema: $schema$1,
	description: description,
	definitions: definitions$1,
	type: type$1,
	properties: properties$1,
	dependencies: dependencies$1,
	"default": {
}
};

var title = "JSON schema for Google Chrome extension manifest files";
var $schema = "http://json-schema.org/draft-04/schema#";
var type = "object";
var additionalProperties = true;
var required = [
	"manifest_version",
	"name",
	"version"
];
var properties = {
	manifest_version: {
		type: "number",
		description: "One integer specifying the version of the manifest file format your package requires.",
		"enum": [
			3
		],
		minimum: 3,
		maximum: 3
	},
	name: {
		type: "string",
		description: "The name of the extension",
		maxLength: 45
	},
	version: {
		description: "One to four dot-separated integers identifying the version of this extension.",
		$ref: "#/definitions/version_string"
	},
	default_locale: {
		type: "string",
		description: "Specifies the subdirectory of _locales that contains the default strings for this extension.",
		"default": "en"
	},
	description: {
		type: "string",
		description: "A plain text description of the extension",
		maxLength: 132
	},
	icons: {
		type: "object",
		description: "One or more icons that represent the extension, app, or theme. Recommended format: PNG; also BMP, GIF, ICO, JPEG.",
		minProperties: 1,
		properties: {
			"16": {
				$ref: "#/definitions/icon",
				description: "Used as the favicon for an extension's pages and infobar."
			},
			"48": {
				$ref: "#/definitions/icon",
				description: "Used on the extension management page (chrome://extensions)."
			},
			"128": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			},
			"256": {
				$ref: "#/definitions/icon",
				description: "Used during installation and in the Chrome Web Store."
			}
		}
	},
	browser_action: {
		$ref: "#/definitions/action",
		description: "Use browser actions to put icons in the main Google Chrome toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup."
	},
	page_action: {
		$ref: "#/definitions/action",
		description: "Use the chrome.pageAction API to put icons inside the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages."
	},
	background: {
		type: "object",
		description: "The background page is an HTML page that runs in the extension process. It exists for the lifetime of your extension, and only one instance of it at a time is active.",
		properties: {
			persistent: {
				type: "boolean",
				description: "When false, makes the background page an event page (loaded only when needed).",
				"default": true
			},
			page: {
				$ref: "#/definitions/page",
				description: "Specify the HTML of the background page.",
				"default": "background.html"
			},
			scripts: {
				$ref: "#/definitions/scripts",
				description: "A background page will be generated by the extension system that includes each of the files listed in the scripts property.",
				"default": [
					"background.js"
				]
			}
		},
		dependencies: {
			page: {
				not: {
					required: [
						"scripts"
					]
				}
			},
			scripts: {
				not: {
					required: [
						"page"
					]
				}
			}
		}
	},
	chrome_url_overrides: {
		type: "object",
		description: "Override pages are a way to substitute an HTML file from your extension for a page that Google Chrome normally provides.",
		additionalProperties: false,
		maxProperties: 1,
		properties: {
			bookmarks: {
				$ref: "#/definitions/page",
				description: "The page that appears when the user chooses the Bookmark Manager menu item from the Chrome menu or, on Mac, the Bookmark Manager item from the Bookmarks menu. You can also get to this page by entering the URL chrome://bookmarks.",
				"default": "bookmarks.html"
			},
			history: {
				$ref: "#/definitions/page",
				description: "The page that appears when the user chooses the History menu item from the Chrome menu or, on Mac, the Show Full History item from the History menu. You can also get to this page by entering the URL chrome://history.",
				"default": "history.html"
			},
			newtab: {
				$ref: "#/definitions/page",
				description: "The page that appears when the user creates a new tab or window. You can also get to this page by entering the URL chrome://newtab.",
				"default": "newtab.html"
			}
		}
	},
	commands: {
		type: "object",
		description: "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension.",
		patternProperties: {
			".*": {
				$ref: "#/definitions/command"
			},
			"^_execute_browser_action$": {
				$ref: "#/definitions/command"
			},
			"^_execute_page_action$": {
				$ref: "#/definitions/command"
			}
		}
	},
	content_scripts: {
		type: "array",
		description: "Content scripts are JavaScript files that run in the context of web pages.",
		minItems: 1,
		uniqueItems: true,
		items: {
			type: "object",
			required: [
				"matches"
			],
			additionalProperties: false,
			properties: {
				matches: {
					type: "array",
					description: "Specifies which pages this content script will be injected into.",
					minItems: 1,
					uniqueItems: true,
					items: {
						$ref: "#/definitions/match_pattern"
					}
				},
				exclude_matches: {
					type: "array",
					description: "Excludes pages that this content script would otherwise be injected into.",
					uniqueItems: true,
					items: {
						$ref: "#/definitions/match_pattern"
					}
				},
				css: {
					type: "array",
					description: "The list of CSS files to be injected into matching pages. These are injected in the order they appear in this array, before any DOM is constructed or displayed for the page.",
					uniqueItems: true,
					items: {
						$ref: "#/definitions/uri"
					}
				},
				js: {
					$ref: "#/definitions/scripts",
					description: "The list of JavaScript files to be injected into matching pages. These are injected in the order they appear in this array."
				},
				run_at: {
					type: "string",
					description: "Controls when the files in js are injected.",
					"enum": [
						"document_start",
						"document_end",
						"document_idle"
					],
					"default": "document_idle"
				},
				all_frames: {
					type: "boolean",
					description: "Controls whether the content script runs in all frames of the matching page, or only the top frame.",
					"default": false
				},
				include_globs: {
					type: "array",
					description: "Applied after matches to include only those URLs that also match this glob. Intended to emulate the @include Greasemonkey keyword.",
					uniqueItems: true,
					items: {
						$ref: "#/definitions/glob_pattern"
					}
				},
				exclude_globs: {
					type: "array",
					description: "Applied after matches to exclude URLs that match this glob. Intended to emulate the @exclude Greasemonkey keyword.",
					uniqueItems: true,
					items: {
						$ref: "#/definitions/glob_pattern"
					}
				},
				match_about_blank: {
					type: "boolean",
					description: "Whether to insert the content script on about:blank and about:srcdoc.",
					"default": false
				}
			}
		}
	},
	content_security_policy: {
		$ref: "#/definitions/content_security_policy"
	},
	devtools_page: {
		$ref: "#/definitions/page",
		description: "A DevTools extension adds functionality to the Chrome DevTools. It can add new UI panels and sidebars, interact with the inspected page, get information about network requests, and more."
	},
	externally_connectable: {
		type: "object",
		description: "Declares which extensions, apps, and web pages can connect to your extension via runtime.connect and runtime.sendMessage.",
		items: {
			type: "object",
			additionalProperties: false,
			properties: {
				ids: {
					type: "array",
					items: {
						type: "string",
						description: "The IDs of extensions or apps that are allowed to connect. If left empty or unspecified, no extensions or apps can connect."
					}
				},
				matches: {
					type: "array",
					items: {
						type: "string",
						description: "The URL patterns for web pages that are allowed to connect. This does not affect content scripts. If left empty or unspecified, no web pages can connect."
					}
				},
				accepts_tls_channel_id: {
					type: "boolean",
					"default": false,
					description: "Indicates that the extension would like to make use of the TLS channel ID of the web page connecting to it. The web page must also opt to send the TLS channel ID to the extension via setting includeTlsChannelId to true in runtime.connect's connectInfo or runtime.sendMessage's options."
				}
			}
		}
	},
	file_browser_handlers: {
		type: "array",
		description: "You can use this API to enable users to upload files to your website.",
		minItems: 1,
		items: {
			type: "object",
			required: [
				"id",
				"default_title",
				"file_filters"
			],
			additionalProperties: false,
			properties: {
				id: {
					type: "string",
					description: "Used by event handling code to differentiate between multiple file handlers"
				},
				default_title: {
					type: "string",
					description: "What the button will display."
				},
				file_filters: {
					type: "array",
					description: "Filetypes to match.",
					minItems: 1,
					items: {
						type: "string"
					}
				}
			}
		}
	},
	homepage_url: {
		$ref: "#/definitions/uri",
		description: "The URL of the homepage for this extension."
	},
	incognito: {
		type: "string",
		description: "Specify how this extension will behave if allowed to run in incognito mode.",
		"enum": [
			"spanning",
			"split"
		],
		"default": "spanning"
	},
	input_components: {
		type: "array",
		description: "Allows your extension to handle keystrokes, set the composition, and manage the candidate window.",
		items: {
			type: "object",
			required: [
				"name",
				"type",
				"id",
				"description",
				"language",
				"layouts"
			],
			additionalProperties: false,
			properties: {
				name: {
					type: "string"
				},
				type: {
					type: "string"
				},
				id: {
					type: "string"
				},
				description: {
					type: "string"
				},
				language: {
					type: "string"
				},
				layouts: {
					type: "array"
				}
			}
		}
	},
	key: {
		type: "string",
		description: "This value can be used to control the unique ID of an extension, app, or theme when it is loaded during development."
	},
	minimum_chrome_version: {
		$ref: "#/definitions/version_string",
		description: "The version of Chrome that your extension, app, or theme requires, if any."
	},
	nacl_modules: {
		type: "array",
		description: "One or more mappings from MIME types to the Native Client module that handles each type.",
		minItems: 1,
		uniqueItems: true,
		items: {
			type: "object",
			required: [
				"path",
				"mime_type"
			],
			additionalProperties: false,
			properties: {
				path: {
					$ref: "#/definitions/uri",
					description: "The location of a Native Client manifest (a .nmf file) within the extension directory."
				},
				mime_type: {
					$ref: "#/definitions/mime_type",
					description: "The MIME type for which the Native Client module will be registered as content handler."
				}
			}
		}
	},
	oauth2: {
		type: "object",
		description: "Use the Chrome Identity API to authenticate users: the getAuthToken for users logged into their Google Account and the launchWebAuthFlow for users logged into a non-Google account.",
		required: [
			"client_id",
			"scopes"
		],
		additionalProperties: false,
		properties: {
			client_id: {
				type: "string",
				description: "You need to register your app in the Google APIs Console to get the client ID."
			},
			scopes: {
				type: "array",
				minItems: 1,
				items: {
					type: "string"
				}
			}
		}
	},
	offline_enabled: {
		type: "boolean",
		description: "Whether the app or extension is expected to work offline. When Chrome detects that it is offline, apps with this field set to true will be highlighted on the New Tab page."
	},
	omnibox: {
		type: "object",
		description: "The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox.",
		required: [
			"keyword"
		],
		additionalProperties: false,
		properties: {
			keyword: {
				type: "string",
				description: "The keyward that will trigger your extension."
			}
		}
	},
	optional_permissions: {
		$ref: "#/definitions/permissions",
		description: "Use the chrome.permissions API to request declared optional permissions at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary."
	},
	options_page: {
		$ref: "#/definitions/page",
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, a link to it will be provided from the extensions management page at chrome://extensions. Clicking the Options link opens a new tab pointing at your options page.",
		"default": "options.html"
	},
	options_ui: {
		type: "object",
		description: "To allow users to customize the behavior of your extension, you may wish to provide an options page. If you do, an Options link will be shown on the extensions management page at chrome://extensions which opens a dialogue containing your options page.",
		required: [
			"page"
		],
		properties: {
			page: {
				type: "string",
				description: "The path to your options page, relative to your extension's root."
			},
			chrome_style: {
				type: "boolean",
				"default": true,
				description: "If true, a Chrome user agent stylesheet will be applied to your options page. The default value is false, but we recommend you enable it for a consistent UI with Chrome."
			},
			open_in_tab: {
				type: "boolean",
				"default": false,
				description: "If true, your extension's options page will be opened in a new tab rather than embedded in chrome://extensions. The default is false, and we recommend that you don't change it. This is only useful to delay the inevitable deprecation of the old options UI! It will be removed soon, so try not to use it. It will break."
			}
		}
	},
	permissions: {
		$ref: "#/definitions/permissions",
		description: "Permissions help to limit damage if your extension or app is compromised by malware. Some permissions are also displayed to users before installation, as detailed in Permission Warnings."
	},
	host_permissions: {
		type: "array",
		items: {
			type: "string"
		}
	},
	requirements: {
		type: "object",
		description: "Technologies required by the app or extension. Hosting sites such as the Chrome Web Store may use this list to dissuade users from installing apps or extensions that will not work on their computer.",
		additionalProperties: false,
		properties: {
			"3D": {
				type: "object",
				description: "The '3D' requirement denotes GPU hardware acceleration.",
				required: [
					"features"
				],
				additionalProperties: false,
				properties: {
					features: {
						type: "array",
						description: "List of the 3D-related features your app requires.",
						minItems: 1,
						uniqueItems: true,
						items: {
							type: "string",
							"enum": [
								"webgl"
							]
						}
					}
				}
			},
			plugins: {
				type: "object",
				description: "Indicates if an app or extension requires NPAPI to run. This requirement is enabled by default when the manifest includes the 'plugins' field.",
				required: [
					"npapi"
				],
				additionalProperties: false,
				properties: {
					npapi: {
						type: "boolean",
						"default": true
					}
				}
			}
		}
	},
	sandbox: {
		type: "object",
		description: "Defines an collection of app or extension pages that are to be served in a sandboxed unique origin, and optionally a Content Security Policy to use with them.",
		required: [
			"pages"
		],
		additionalProperties: false,
		properties: {
			pages: {
				type: "array",
				minItems: 1,
				uniqueItems: true,
				items: {
					$ref: "#/definitions/page"
				}
			},
			content_security_policy: {
				$ref: "#/definitions/content_security_policy",
				"default": "sandbox allow-scripts allow-forms"
			}
		}
	},
	short_name: {
		type: "string",
		description: "The short name is typically used where there is insufficient space to display the full name.",
		maxLength: 12
	},
	update_url: {
		$ref: "#/definitions/uri",
		description: "If you publish using the Chrome Developer Dashboard, ignore this field. If you bridge your own extension or app: URL to an update manifest XML file."
	},
	tts_engine: {
		type: "object",
		description: "Register itself as a speech engine.",
		required: [
			"voices"
		],
		additionalProperties: false,
		properties: {
			voices: {
				type: "array",
				description: "Voices the extension can synthesize.",
				minItems: 1,
				uniqueItems: true,
				items: {
					type: "object",
					required: [
						"voice_name",
						"event_types"
					],
					additionalProperties: false,
					properties: {
						voice_name: {
							type: "string",
							description: "Identifies the name of the voice and the engine used."
						},
						lang: {
							type: "string",
							description: "Almost always, a voice can synthesize speech in just a single language. When an engine supports more than one language, it can easily register a separate voice for each language."
						},
						gender: {
							type: "string",
							description: "If your voice corresponds to a male or female voice, you can use this parameter to help clients choose the most appropriate voice for their application."
						},
						event_types: {
							type: "array",
							description: "Events sent to update the client on the progress of speech synthesis.",
							minItems: 1,
							uniqueItems: true,
							items: {
								type: "string",
								description: "",
								"enum": [
									"start",
									"word",
									"sentence",
									"marker",
									"end",
									"error"
								]
							}
						}
					}
				}
			}
		}
	},
	version_name: {
		type: "string",
		description: "In addition to the version field, which is used for update purposes, version_name can be set to a descriptive version string and will be used for display purposes if present."
	},
	web_accessible_resources: {
		type: "array",
		description: "An array of strings specifying the paths (relative to the package root) of packaged resources that are expected to be usable in the context of a web page.",
		minItems: 1,
		uniqueItems: true,
		items: {
			type: "object",
			additionalProperties: false,
			properties: {
				resources: {
					type: "array",
					description: "",
					items: {
						type: "string"
					}
				},
				matches: {
					type: "array",
					description: "",
					items: {
						type: "string"
					}
				},
				extension_ids: {
					type: "array",
					description: "",
					items: {
						type: "string"
					}
				},
				use_dynamic_url: {
					type: "boolean",
					description: ""
				}
			}
		}
	},
	chrome_settings_overrides: {
	},
	content_pack: {
	},
	current_locale: {
	},
	"import": {
	},
	platforms: {
	},
	signature: {
	},
	spellcheck: {
	},
	storage: {
	},
	system_indicator: {
	}
};
var dependencies = {
	page_action: {
		not: {
			required: [
				"browser_action"
			]
		}
	},
	browser_action: {
		not: {
			required: [
				"page_action"
			]
		}
	},
	content_scripts: {
		not: {
			required: [
				"script_badge"
			]
		}
	},
	script_badge: {
		not: {
			required: [
				"content_scripts"
			]
		}
	}
};
var definitions = {
	action: {
		type: "object",
		properties: {
			default_title: {
				type: "string",
				description: "Tooltip for the main toolbar icon."
			},
			default_popup: {
				$ref: "#/definitions/uri",
				description: "The popup appears when the user clicks the icon."
			},
			default_icon: {
				anyOf: [
					{
						type: "string",
						description: "FIXME: String form is deprecated."
					},
					{
						type: "object",
						description: "Icon for the main toolbar.",
						properties: {
							"19": {
								$ref: "#/definitions/icon"
							},
							"38": {
								$ref: "#/definitions/icon"
							}
						}
					}
				]
			}
		},
		dependencies: {
			name: {
				not: {
					required: [
						"name"
					]
				}
			},
			icons: {
				not: {
					required: [
						"icons"
					]
				}
			},
			popup: {
				not: {
					required: [
						"popup"
					]
				}
			}
		}
	},
	command: {
		type: "object",
		additionalProperties: false,
		properties: {
			description: {
				type: "string"
			},
			suggested_key: {
				type: "object",
				additionalProperties: false,
				patternProperties: {
					"^(default|mac|windows|linux|chromeos)$": {
						type: "string",
						pattern: "^(Ctrl|Command|MacCtrl|Alt|Option)\\+(Shift\\+)?[A-Z]"
					}
				}
			}
		}
	},
	content_security_policy: {
		type: "string",
		description: "This introduces some fairly strict policies that will make extensions more secure by default, and provides you with the ability to create and enforce rules governing the types of content that can be loaded and executed by your extensions and applications.",
		"default": "script-src 'self'; object-src 'self'"
	},
	glob_pattern: {
		type: "string"
	},
	icon: {
		$ref: "#/definitions/uri"
	},
	match_pattern: {
		type: "string",
		pattern: "^((\\*|http|https|file|ftp|chrome-extension):\\/\\/(\\*|\\*\\.[^\\/\\*]+|[^\\/\\*]+)?(\\/.*))|<all_urls>$"
	},
	mime_type: {
		type: "string",
		pattern: "^(?:application|audio|image|message|model|multipart|text|video)\\/[-+.\\w]+$"
	},
	page: {
		$ref: "#/definitions/uri"
	},
	permissions: {
		type: "array",
		uniqueItems: true,
		items: {
			type: "string"
		}
	},
	scripts: {
		type: "array",
		minItems: 1,
		uniqueItems: true,
		items: {
			$ref: "#/definitions/uri"
		}
	},
	uri: {
		type: "string"
	},
	version_string: {
		type: "string",
		pattern: "^(?:\\d{1,5}\\.){0,3}\\d{1,5}$"
	}
};
var manifestSchema = {
	title: title,
	$schema: $schema,
	type: type,
	additionalProperties: additionalProperties,
	required: required,
	properties: properties,
	dependencies: dependencies,
	definitions: definitions
};

class ValidationError extends Error {
    constructor(msg, errors) {
        super(msg);
        this.name = "ValidationError";
        this.errors = errors;
    }
    
}

// const jsonSchema = readJSONSync(
//   resolve(__dirname, 'json-schema-draft-04.json'),
// )

// const manifestSchema = readJSONSync(
//   resolve(__dirname, 'schema-web-ext-manifest-v3.json'),
// )

const ajv = new Ajv__default['default']({
    verbose: true,
    schemaId: "auto",
    schemas: {
        "http://json-schema.org/draft-04/schema#": jsonSchema,
    },
    strictDefaults: true,
});

// ajv.addMetaSchema(jsonSchema)

const validator = ajv.compile(manifestSchema);

const validateManifest = (
    manifest,
) => {
    if (validator(manifest)) { return manifest; }
    const { errors } = validator;
    const msg = "There were problems with the extension manifest.";
    console.error(errors);
    throw new ValidationError(msg, errors);
};

function reduceToRecord(srcDir) {
    if (srcDir === null || typeof srcDir === "undefined") {
        // This would be a config error, so should throw
        throw new TypeError("srcDir is null or undefined");
    }

    return (
        inputRecord,
        filename,
    ) => {
        const name = path.relative(srcDir, filename)
            .split(".")
            .slice(0, -1)
            .join(".");

        if (name in inputRecord) {
            throw new Error(
                `Script files with different extensions should not share names:\n\n"${filename}"\nwill overwrite\n"${inputRecord[name]}"`,
            );
        }

        return { ...inputRecord, [name]: filename };
    };
}

function getChunk(bundle) {
    return Object.keys(bundle)
        .filter(key => isChunk(bundle[key]))
        .reduce((b, k) => {
            b[k] = bundle[k] ;
            return b;
        }, {} );
}

function getAssets(bundle) {
    return Object.keys(bundle)
        .filter(key => isAsset(bundle[key]))
        .reduce((b, k) => {
            b[k] = bundle[k] ;
            return b;
        }, {} );
}

const explorer$1 = cosmiconfig.cosmiconfigSync("manifest", {
    cache: false,
});

const name = "manifest-input";

const npmPkgDetails =
    process.env.npm_package_name &&
        process.env.npm_package_version &&
        process.env.npm_package_description
        ? {
            name: process.env.npm_package_name,
            version: process.env.npm_package_version,
            description: process.env.npm_package_description,
        }
        : {
            name: "",
            version: "",
            description: "",
        };

/* ============================================ */
/*                MANIFEST-INPUT                */
/* ============================================ */

function manifestInput(
    {
        browserPolyfill = false,
        contentScriptWrapper = true,
        crossBrowser = false,
        dynamicImportWrapper = {},
        extendManifest = {},
        firstClassManifest = true,
        iifeJsonPaths = [],
        pkg = npmPkgDetails,
        publicKey,
        cache = {
            assetChanged: false,
            assets: [],
            iife: [],
            input: [],
            inputAry: [],
            inputObj: {},
            permsHash: "",
            readFile: new Map(),
            srcDir: null,
        } ,
    } = {} ,
) {

    /* ----------- HOOKS CLOSURES START ----------- */
    let manifestPath;
    /* ------------ HOOKS CLOSURES END ------------ */

    /* --------------- plugin object -------------- */
    return {
        name,

        browserPolyfill,
        crossBrowser,

        get srcDir() {
            return cache.srcDir;
        },

        get formatMap() {
            return { iife: cache.iife };
        },

        /* ============================================ */
        /*                 OPTIONS HOOK                 */
        /* ============================================ */

        options(options) {
            // Do not reload manifest without changes
            if (!cache.manifest) {
                /* ----------- LOAD AND PROCESS MANIFEST ----------- */
                let inputManifestPath;
                if (Array.isArray(options.input)) {
                    const manifestIndex = options.input.findIndex(
                        isJsonFilePath,
                    );
                    inputManifestPath = options.input[manifestIndex];
                    cache.inputAry = [
                        ...options.input.slice(0, manifestIndex),
                        ...options.input.slice(manifestIndex + 1),
                    ];
                } else if (typeof options.input === "object") {
                    inputManifestPath = options.input.manifest;
                    cache.inputObj = cloneObject(options.input);
                    delete cache.inputObj["manifest"];
                } else {
                    inputManifestPath = options.input;
                }

                if (!isJsonFilePath(inputManifestPath)) {
                    throw new TypeError(
                        "RollupOptions.input must be a single Chrome extension manifest.",
                    );
                }

                // Load content of manifest.json
                const configResult = explorer$1.load(
                    inputManifestPath,
                ) 



;
                if (configResult.isEmpty) {
                    throw new Error(`${options.input} is an empty file.`);
                }

                const { options_page, options_ui } = configResult.config;
                if (
                    options_page !== undefined &&
                    options_ui !== undefined
                ) {
                    throw new Error(
                        "options_ui and options_page cannot both be defined in manifest.json.",
                    );
                }

                manifestPath = configResult.filepath;

                if (typeof extendManifest === "function") {
                    cache.manifest = extendManifest(configResult.config);
                } else if (typeof extendManifest === "object") {
                    cache.manifest = {
                        ...configResult.config,
                        ...extendManifest,
                    };
                } else {
                    cache.manifest = configResult.config;
                }

                cache.srcDir = path__default['default'].dirname(manifestPath);

                if (firstClassManifest) {
                    cache.iife = iifeJsonPaths
                        .map((jsonPath) => {
                            const result = jsonpathPlus.JSONPath({
                                path: jsonPath,
                                json: cache.manifest,
                            });

                            return result;
                        })
                        .flat(Infinity);

                    // Derive entry paths from manifest
                    const { js, html, css, img, others } = deriveFiles$1(
                        cache.manifest,
                        cache.srcDir,
                    );

                    // Cache derived inputs
                    cache.input = [...cache.inputAry, ...js, ...html];

                    cache.assets = [
                        // Dedupe assets
                        ...new Set([...css, ...img, ...others]),
                    ];
                }

                /* --------------- END LOAD MANIFEST --------------- */
            }
            const finalInput = cache.input.reduce(
                reduceToRecord(cache.srcDir),
                cache.inputObj,
            );
            return { ...options, input: finalInput };
        },

        /* ============================================ */
        /*                GENERATEBUNDLE                */
        /* ============================================ */

        generateBundle(options, bundle) {
            /* ----------------- GET CHUNKS -----------------*/
            const chunks = getChunk(bundle);
            const assets = getAssets(bundle);

            if (Object.keys(bundle).length === 0) {
                throw new Error(
                    "The manifest must have at least one asset (html or css) or script file.",
                );
            }

            try {
                // Clone cache.manifest
                if (!cache.manifest)
                    // This is a programming error, so it should throw
                    throw new TypeError(`cache.manifest is ${typeof cache.manifest}`);

                const clonedManifest = cloneObject(cache.manifest);

                const manifestBody = validateManifest({
                    description: pkg.description,
                    ...clonedManifest,
                    permissions: combinePerms(
                        clonedManifest.permissions || [],
                    ),
                } );

                const {
                    content_scripts: cts = [],
                    web_accessible_resources: war = [],
                    background: { service_worker: sw = "" } = {},
                } = manifestBody;
                /* ------------- SETUP CONTENT SCRIPTS ------------- */
                manifestBody.content_scripts = cts.map(
                    ({ js, ...rest }) => typeof js === "undefined"
                        ? rest
                        : {
                            js: js
                                .map(filename => getOutputFilenameFromChunk(path.join(cache.srcDir, filename), Object.values(chunks)))
                                .filter(filename => !!filename)
                                .map((p) => slash__default['default'](p)),
                            ...rest,
                        },
                );
                /* ------------ SETUP BACKGROUND SCRIPTS ----------- */
                if (sw && manifestBody.background && manifestBody.background.service_worker) {
                    // make background chunk output in the same directory as manifest.json
                    const chunk = findChunk(path.join(cache.srcDir, manifestBody.background.service_worker), chunks);
                    if (chunk) {
                        // remove original chunk
                        delete bundle[chunk.fileName];
                        // change background chunk output in the same directory as manifest.json
                        chunk.fileName = chunk.fileName.replace(/assets\//, "");
                        bundle[chunk.fileName] = chunk;
                        manifestBody.background.service_worker = chunk.fileName;
                    }
                }
                /* ------------ SETUP ASSETS IN WEB ACCESSIBLE RESOURCES ----------- */
                manifestBody.web_accessible_resources = [
                    ...war, {
                    resources: Object.keys(assets),
                    matches: ["<all_urls>"]
                }];
                /* --------- STABLE EXTENSION ID -------- */
                if (publicKey) manifestBody.key = publicKey;
                /* ----------- OUTPUT MANIFEST.JSON ---------- */
                generateManifest(this, manifestBody);
            } catch (error) {
                // Catch here because we need the validated result in scope
                if (error.name !== "ValidationError") throw error;
                const errors = error.errors ;
                if (errors) {
                    errors.forEach((err) => {
                        // FIXME: make a better validation error message
                        // https://github.com/atlassian/better-ajv-errors
                        this.warn(JSON.stringify(err, undefined, 2));
                    });
                }
                this.error(error.message);
            }
        },
    };
}

function logInputFiles(entries) {
    console.log("\x1B[36m%s", "\nFind entry files");
    if (!entries) {
        console.log("\x1B[33m%s\x1B[0m", "Empty entry files.");
    }
    if (typeof entries === "string") {
        console.log("\x1B[32m%s\x1B[0m", entries);
    } else if (Array.isArray(entries)) {
        entries.forEach(input => {
            console.log("\x1B[32m%s\x1B[0m", input);
        });
    } else {
        for (const alias in entries) {
            if (Object.prototype.hasOwnProperty.call(entries, alias)) {
                console.log("\x1B[0m%s: \x1B[32m%s\x1B[0m", alias, entries[alias]);
            }
        }
    }
    console.log();
}


const logger = {
    info: (msg) => console.log("\x1B[32m%s\x1B[0m", msg),
    error: (msg) => console.log("\x1B[31m%s\x1B[0m", msg),
    warn: (msg) => console.log("\x1B[33m%s\x1B[0m", msg),
    logInputFiles,
};

const validateNames = () => ({
    name: "validate-names",

    generateBundle(options, bundle) {
        const chunks = Object.values(bundle).filter(
            (x) => x.type === "chunk",
        );

        // Files cannot start with "_" in Chrome Extensions
        // Loop through each file and check for "_" in filename
        Object.keys(bundle)
            .filter((fileName) => fileName.startsWith("_"))
            .forEach((fileName) => {
                // Only replace first instance
                const regex = new RegExp(fileName);
                const fixed = fileName.slice(1);

                // Fix manifest
                const manifest = bundle["manifest.json"] ;
                manifest.source = manifest.source.replace(regex, fixed);

                // Change bundle key
                const chunk = bundle[fileName];
                delete bundle[fileName];
                bundle[fixed] = chunk;

                // Fix chunk
                chunk.fileName = fixed;

                // Find imports and fix
                chunks
                    .filter(({ imports }) => imports.includes(fileName))
                    .forEach((chunk) => {
                        // Fix imports list
                        chunk.imports = chunk.imports.map((i) =>
                            i === fileName ? fixed : i,
                        );
                        // Fix imports in code
                        chunk.code = chunk.code.replace(regex, fixed);
                    });
            });
    },
});

// /* ============================================ */
// /*                DERIVE MANIFEST               */
// /* ============================================ */

// export function deriveManifest(
//   manifest: ChromeExtensionManifest, // manifest.json
//   ...permissions: string[] | string[][] // will be combined with manifest.permissions
// ): ChromeExtensionManifest {
//   return validateManifest({
//     // SMELL: Is this necessary?
//     manifest_version: 2,
//     ...manifest,
//     permissions: combinePerms(permissions, manifest.permissions),
//   })
// }

/* -------------------------------------------- */
/*                 DERIVE FILES                 */
/* -------------------------------------------- */

function deriveFiles(
    manifest,
    srcDir,
) {
    // get resources from section web_accessible_resources
    const web_accessible_resources = get__default['default'](
        manifest,
        "web_accessible_resources",
        [] ,
    ).reduce((resource_paths, web_accessible_resource) =>
        web_accessible_resource.resources.reduce((r, x) => {
            if (glob__default['default'].hasMagic(x)) {
                const files = glob__default['default'].sync(x, { cwd: srcDir });
                return [...r, ...files.map((f) => f.replace(srcDir, ""))];
            } else {
                return [...r, x];
            }
        }, resource_paths),
    [] );

    /**
     * js files come from:
     *  - web_accessible_resources
     *  - background.service_worker
     *  - content_scripts
     */
    const js = [
        ...web_accessible_resources.filter((f) => /\.[jt]sx?$/.test(f)),
        get__default['default'](manifest, "background.service_worker"),
        ...get__default['default'](
            manifest,
            "content_scripts",
            [] ,
        ).reduce((r, { js = [] }) => [...r, ...js], [] ),
    ];

    /**
     * html files come from:
     *  - web_accessible_resources
     *  - options_page
     *  - options_ui.page
     *  - devtools_page
     *  - action.default_popup
     *  - chrome_url_overrides
     */
    const html = [
        ...web_accessible_resources.filter((f) => /\.html?$/.test(f)),
        get__default['default'](manifest, "options_page"),
        get__default['default'](manifest, "options_ui.page"),
        get__default['default'](manifest, "devtools_page"),
        get__default['default'](manifest, "action.default_popup"),
        ...Object.values(get__default['default'](manifest, "chrome_url_overrides", {})),
    ];

    /**
     * css files come from:
     *  - web_accessible_resources
     *  - content_scripts
     */
    const css = [
        ...web_accessible_resources.filter((f) => f.endsWith(".css")),
        ...get__default['default'](
            manifest,
            "content_scripts",
            [] ,
        ).reduce(
            (r, { css = [] }) => [...r, ...css],
            [] ,
        ),
    ];

    /**
     * action icons come from:
     *  - web_accessible_resources
     *  - content_scripts
     */
    const actionIconSet = new Set();
    const default_icons = get__default['default'](
        manifest,
        "action.default_icon",
        {} ,
    );
    if (typeof default_icons === "string") {
        actionIconSet.add(default_icons);
    } else {
        Object.values(default_icons).forEach((x) => actionIconSet.add(x));
    }

    /**
     * image files come from:
     *  - web_accessible_resources
     *  - action.default_icon
     *  - icons
     */
    const img = [
        ...actionIconSet,
        ...web_accessible_resources.filter((f) =>
            /\.(jpe?g|png|svg|tiff?|gif|webp|bmp|ico)$/i.test(f),
        ),
        ...Object.values(get__default['default'](manifest, "icons", {})),
    ];

    // Files like fonts, things that are not expected
    const others = diff__default['default'](web_accessible_resources, css, js, html, img);

    return {
        css: validate(css),
        js: validate(js),
        html: validate(html),
        img: validate(img),
        others: validate(others),
    };

    function validate(ary) {
        return [...new Set(ary.filter(isString))].map((x) =>
            path.join(srcDir, x),
        );
    }

    function isString(x) {
        return typeof x === "string";
    }
}

function removeFileExtension(filePath) {
    const index = filePath.lastIndexOf(".");
    return index > -1 ? filePath.substring(0, index) : filePath;
}

function flattenRollupInput(input) {
    let inputArray;
    if (typeof input === "string") {
        inputArray = [input];
    } else if (Array.isArray(input)) {
        inputArray = [...input];
    } else if (typeof input === "object") {
        inputArray = Object.values(input);
    } else {
        throw new TypeError(
            `options.input cannot be ${typeof input}`,
        );
    }
    return inputArray;
}

const cssUrlRE = /((?<=url *\( *' *)[^(data:)][^']+(?= *' *\))|(?<=url *\( *" *)[^(data:)][^"]+(?= *" *\))|(?<=url *\( *)[^(data:)][^'")]+(?= *\)))/g;

function replaceCssUrl(code) {
    const resources = new Set();
    const updatedCode = code.replace(cssUrlRE, (substring) => {
        const url = substring.trim();
        if (url) {
            resources.add(url);
            return "chrome-extension://" + slash__default['default'](path.join("__MSG_@@extension_id__", substring.trim()));
        } else {
            return "";
        }
    });
    return resources.size > 0
        ? { code: updatedCode, resources: Array.from(resources) }
        : { code: updatedCode };
}

function updateCss(asset) {
    if (typeof asset.source === "string") {
        // update url() in css
        const { code, resources } = replaceCssUrl(asset.source);
        asset.source = code;
        return { asset, resources };
    }
    return { asset };
}

function mixinPlugin(
    bundle,
) {
    return {
        name: "mixin",
        resolveId(source, importer) {
            try {
                if (typeof importer === "undefined") {
                    return source;
                } else {
                    const dir = path.dirname(importer);
                    const resolved = path.join(dir, source);
                    return resolved in bundle ? resolved : false;
                }
            } catch (error) {
                console.log("resolveId", error);
                return null;
            }
        },
        load(id) {
            const chunk = bundle[id] ;
            if (chunk) {
                // remove chunk from bundle
                if (Object.values(bundle).filter(c => c.type === "chunk" && c.imports.includes(chunk.fileName)).length < 1) {
                    delete bundle[id];
                }
                return {
                    code: chunk.code,
                    map: chunk.map,
                };
            } else {
                return null;
            }
        },
    }
}

/**
 * bundle entry chunk and its dependences into one IIFE chunk
 * this function will replace the entry chunk
 * @param context: context of parent rollup process
 * @param entry: chunk as entry point
 * @param bundle: chunks bundled by parent rollup process
 * @returns
 */
async function mixinChunksForIIFE(
    context,
    entry,
    bundle
) {
    const build = await rollup.rollup({
        input: entry.fileName,
        plugins: [mixinPlugin(bundle)]
    });
    const outputs = (await build.generate({ format: "iife" })).output;
    if (outputs.length < 1) {
        throw new Error("");
    } else if (outputs.length > 1) {
        throw new Error("mix content script chunks error: output must contain only one chunk.");
    }
    const outputChunk = outputs[0];
    const referenceId = context.emitFile({
        type: "asset",
        source: outputChunk.code,
        fileName: entry.fileName
    });
    return context.getFileName(referenceId);
}

class ContentScriptProcessor {
    constructor( options) {this.options = options;}
     async generateBundle(
        context,
        bundle,
        manifest,
    ) {
        for (const content_script of manifest.content_scripts || []) {
            const {js, css, ...rest} = content_script;
            if (typeof js === "undefined") { continue; }
            // process related css
            js.map(name => findAssetByName(`${removeFileExtension(name)}.css`, bundle) )
                .filter(asset => !!asset)
                .map(asset => {
                    const { asset: ast, resources } = updateCss(asset);
                    // add resource to web_accessible_resources
                    if (resources) {
                        const web_accessible_resources = {
                            resources,
                            matches: rest.matches
                        };
                        if (!manifest.web_accessible_resources) {
                            manifest.web_accessible_resources = [web_accessible_resources];
                        } else {
                            manifest.web_accessible_resources.push(web_accessible_resources);
                        }
                    }
                    return ast;
                })
                .forEach(asset => {
                    const cssFileName = slash__default['default'](asset.fileName);
                    if (css) {
                        css.push(cssFileName);
                    } else {
                        content_script.css = [cssFileName];
                    }
                });
            // mixin related js
            content_script.js = [];
            for (const jsName of js) {
                const chunk = findChunkByName(removeFileExtension(jsName), bundle);
                if (chunk) {
                    content_script.js.push(slash__default['default'](await mixinChunksForIIFE(context, chunk, bundle)));
                }
            }
        }
    }

     async generateBundleFromDynamicImports(
        context,
        bundle,
        dynamicImports,
    ) {
        for (const dynamicImport of dynamicImports) {
            const filename = context.getFileName(dynamicImport);
            const chunk = bundle[filename];
            if (chunk && chunk.type === "chunk") {
                await mixinChunksForIIFE(context, chunk, bundle);
            }
        }
    }
}

/* ============================================ */
/*               CHECK PERMISSIONS              */
/* ============================================ */

// export const debugger = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*debugger/.test(s)
// export const enterprise.deviceAttributes = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.deviceAttributes/.test(s)
// export const enterprise.hardwarePlatform = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.hardwarePlatform/.test(s)
// export const enterprise.platformKeys = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*enterprise\.platformKeys/.test(s)
// export const networking.config = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*networking\.config/.test(s)
// export const system.cpu = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.cpu/.test(s)
// export const system.display = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.display/.test(s)
// export const system.memory = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.memory/.test(s)
// export const system.storage = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*system\.storage/.test(s)

const alarms = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*alarms/.test(s);

const bookmarks = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*bookmarks/.test(s);

const contentSettings = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*contentSettings/.test(s);

const contextMenus = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*contextMenus/.test(s);

const cookies = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*cookies/.test(s);

const declarativeContent = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeContent/.test(s);
const declarativeNetRequest = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeNetRequest/.test(s);
const declarativeWebRequest = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*declarativeWebRequest/.test(s);
const desktopCapture = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*desktopCapture/.test(s);
const displaySource = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*displaySource/.test(s);
const dns = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*dns/.test(s);
const documentScan = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*documentScan/.test(s);
const downloads = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*downloads/.test(s);
const experimental = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*experimental/.test(s);
const fileBrowserHandler = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*fileBrowserHandler/.test(s);
const fileSystemProvider = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*fileSystemProvider/.test(s);
const fontSettings = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*fontSettings/.test(s);
const gcm = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*gcm/.test(s);
const geolocation = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*geolocation/.test(s);
const history = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*history/.test(s);
const identity = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*identity/.test(s);
const idle = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*idle/.test(s);
const idltest = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*idltest/.test(s);
const management = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*management/.test(s);
const nativeMessaging = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*nativeMessaging/.test(s);
const notifications = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*notifications/.test(s);
const pageCapture = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*pageCapture/.test(s);
const platformKeys = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*platformKeys/.test(s);
const power = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*power/.test(s);
const printerProvider = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*printerProvider/.test(s);
const privacy = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*privacy/.test(s);
const processes = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*processes/.test(s);
const proxy = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*proxy/.test(s);
const sessions = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*sessions/.test(s);
const signedInDevices = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*signedInDevices/.test(s);
const storage = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*storage/.test(s);
const tabCapture = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*tabCapture/.test(s);
// export const tabs = s => /((chromep?)|(browser))[\s\n]*\.[\s\n]*tabs/.test(s)
const topSites = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*topSites/.test(s);
const tts = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*tts/.test(s);
const ttsEngine = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*ttsEngine/.test(s);
const unlimitedStorage = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*unlimitedStorage/.test(s);
const vpnProvider = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*vpnProvider/.test(s);
const wallpaper = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*wallpaper/.test(s);
const webNavigation = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*webNavigation/.test(s);
const webRequest = (s) =>
    /((chromep?)|(browser))[\s\n]*\.[\s\n]*webRequest/.test(s);
const webRequestBlocking = (s) =>
    webRequest(s) && s.includes("'blocking'");

// TODO: add readClipboard
// TODO: add writeClipboard

var permissions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    alarms: alarms,
    bookmarks: bookmarks,
    contentSettings: contentSettings,
    contextMenus: contextMenus,
    cookies: cookies,
    declarativeContent: declarativeContent,
    declarativeNetRequest: declarativeNetRequest,
    declarativeWebRequest: declarativeWebRequest,
    desktopCapture: desktopCapture,
    displaySource: displaySource,
    dns: dns,
    documentScan: documentScan,
    downloads: downloads,
    experimental: experimental,
    fileBrowserHandler: fileBrowserHandler,
    fileSystemProvider: fileSystemProvider,
    fontSettings: fontSettings,
    gcm: gcm,
    geolocation: geolocation,
    history: history,
    identity: identity,
    idle: idle,
    idltest: idltest,
    management: management,
    nativeMessaging: nativeMessaging,
    notifications: notifications,
    pageCapture: pageCapture,
    platformKeys: platformKeys,
    power: power,
    printerProvider: printerProvider,
    privacy: privacy,
    processes: processes,
    proxy: proxy,
    sessions: sessions,
    signedInDevices: signedInDevices,
    storage: storage,
    tabCapture: tabCapture,
    topSites: topSites,
    tts: tts,
    ttsEngine: ttsEngine,
    unlimitedStorage: unlimitedStorage,
    vpnProvider: vpnProvider,
    wallpaper: wallpaper,
    webNavigation: webNavigation,
    webRequest: webRequest,
    webRequestBlocking: webRequestBlocking
});

/* ============================================ */
/*              DERIVE PERMISSIONS              */
/* ============================================ */
const derivePermissions = (
    set,
    { code },
) =>
    Object.entries(permissions)
        .filter(([, fn]) => fn(code))
        .map(([key]) => key)
        .reduce((s, p) => s.add(p), set);

class PermissionProcessorCache {constructor() { PermissionProcessorCache.prototype.__init.call(this);PermissionProcessorCache.prototype.__init2.call(this); }
     __init() {this.permsHash = "";}
     __init2() {this.assetChanged = false;}
}

class PermissionProcessorOptions {constructor() { PermissionProcessorOptions.prototype.__init3.call(this); }
     __init3() {this.verbose = true;}
}

class PermissionProcessor {
     __init4() {this.cache = new PermissionProcessorCache();}

     constructor( options) {this.options = options;PermissionProcessor.prototype.__init4.call(this);}

     derivePermissions(
        context,
        chunks,
        manifest,
    ) {
        let permissions;
        if (this.cache.assetChanged && this.cache.permsHash) {
            // Permissions did not change
            permissions = JSON.parse(this.cache.permsHash) ;
            this.cache.assetChanged = false;
        } else {
            // Permissions may have changed
            permissions = Array.from(
                Object.values(chunks).reduce(derivePermissions, new Set()));
            const permsHash = JSON.stringify(permissions);
            if (this.options.verbose && permissions.length) {
                if (!this.cache.permsHash) {
                    context.warn(
                        `Detected permissions: ${permissions.toString()}`,
                    );
                } else if (permsHash !== this.cache.permsHash) {
                    context.warn(
                        `Detected new permissions: ${permissions.toString()}`,
                    );
                }
            }
            this.cache.permsHash = permsHash;
        }
        // update permissions in manifest.json
        const updatedPermissions = new Set([...manifest.permissions || [], ...permissions]);
        if (updatedPermissions.size > 0) {
            manifest.permissions = Array.from(updatedPermissions);
        } else {
            delete manifest["permissions"];
        }
    }
}

function _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }


const dynamicImportAssetRex = /(?<=chrome.scripting.insertCSS\()[\s\S]*?(?=\))/gm;
const dynamicImportScriptRex = /(?<=chrome.scripting.executeScript\()[\s\S]*?(?=\))/gm;






class BackgroundProcesser {
    constructor( options) {this.options = options;}

     resolveDynamicImports(context, code) {
        if (!this.options.srcDir) {
            throw new TypeError("BackgroundProcesser: options.srcDir is not initialized");
        }
        /* ----------------- PROCESS DYNAMICALLY IMPORTED ASSETS -----------------*/
        _optionalChain$1([code, 'access', _ => _.match, 'call', _2 => _2(dynamicImportAssetRex)
, 'optionalAccess', _3 => _3.map, 'call', _4 => _4(m => m.match(/(?<=(files:\[)?\")[\s\S]*?(?=\]?\")/gm))
, 'access', _5 => _5.reduce, 'call', _6 => _6((f, m) => f.concat(...(m || [])) || [], [] )
, 'access', _7 => _7.map, 'call', _8 => _8(m => { console.log("resolveDynamicImports", m); return m; })
, 'access', _9 => _9.forEach, 'call', _10 => _10(m => {
                const filePath = path.resolve(this.options.srcDir, m);
                if (fs$1.existsSync(filePath)) {
                    context.emitFile({
                        type: "asset",
                        fileName: m,
                        source: fs$1.readFileSync(filePath),
                    });
                }
            })]);
        /* ----------------- PROCESS DYNAMICALLY IMPORTED SCRIPTS -----------------*/
        // dynamicImports collects files used by chrome.scripting.executeScript
        const dynamicImports = [];
        const updatedCode = code.replace(
            dynamicImportScriptRex,
            match => match.replace(/(?<=(files:\[)?)\"[\s\S]*?\"(?=\]?)/gm, fileStr => {
                const file = path.parse(fileStr.replace(/\"/g, "").trim());
                const filePath = path.resolve(this.options.srcDir, file.dir, file.base);
                if (fs$1.existsSync(filePath)) {
                    const referenceId = context.emitFile({
                        id: filePath,
                        type: "chunk",
                        name: path.join(file.dir, file.name)
                    });
                    dynamicImports.push(referenceId);
                    return `import.meta.ROLLUP_FILE_URL_${referenceId}`;
                } else {
                    return fileStr;
                }
            })
        );
        return { code: updatedCode, imports: dynamicImports };
    }

     async generateBundle(
        context,
        bundle,
        manifest
    ) {
        if (_optionalChain$1([manifest, 'access', _11 => _11.background, 'optionalAccess', _12 => _12.service_worker])) {
            // make background chunk output in the same directory as manifest.json
            const chunk = findChunkByName(removeFileExtension(manifest.background.service_worker), bundle);
            if (chunk) {
                // mixin all dependent chunks
                // change background chunk output in the same directory as manifest.json
                chunk.fileName = chunk.fileName.replace(/assets\//, "");
                manifest.background.service_worker = slash__default['default'](await mixinChunksForIIFE(context, chunk, bundle));
            }
        }
    }
}

const explorer = cosmiconfig.cosmiconfigSync("manifest", {
    cache: false,
});











class ManifestProcessor {
     __init() {this.cache = {
        assetChanged: false,
        assets: [],
        iife: [],
        input: [],
        inputAry: [],
        inputObj: {},
        dynamicImportContentScripts: [],
        permsHash: "",
        readFile: new Map(),
        srcDir: null,
    }; }
    
    
    
    

     constructor( options = {} ) {this.options = options;ManifestProcessor.prototype.__init.call(this);ManifestProcessor.prototype.__init2.call(this);
        this.contentScriptProcessor = new ContentScriptProcessor(options);
        this.permissionProcessor = new PermissionProcessor(new PermissionProcessorOptions());
        this.backgroundProcessor = new BackgroundProcesser(options);
    }

    /**
     * Load content from manifest.json
     * @param options: rollup input options
     */
     load(options) {
        /* --------------- GET MANIFEST.JSON PATH --------------- */
        const inputManifestPath = this.resolveManifestPath(options);
        /* --------------- LOAD CONTENT FROM MANIFEST.JSON --------------- */
        const configResult = explorer.load(inputManifestPath) ;
        /* --------------- VALIDATE MANIFEST.JSON CONTENT --------------- */
        this.validateManifestContent(configResult);
        /* --------------- APPLY USER CUSTOM CONFIG --------------- */
        this.manifest = this.applyExternalManifestConfiguration(configResult);
        /* --------------- RECORD OPTIONS --------------- */
        this.options.manifestPath = configResult.filepath;
        this.options.srcDir = path.dirname(this.options.manifestPath);
        return this.manifest;
    }

    /**
     * Resolve input files for rollup
     * @param input: Input not in manifest.json but specify by user
     * @returns
     */
     resolveInput(input)

 {
        if (!this.manifest || !this.options.srcDir) {
            throw new TypeError("manifest and options.srcDir not initialized");
        }
        // Derive all static resources from manifest
        // Dynamic entries will emit in transform hook
        const { js, html, css, img, others } = deriveFiles(
            this.manifest,
            this.options.srcDir,
        );
        // Cache derived inputs
        this.cache.input = [...this.cache.inputAry, ...js, ...html];
        this.cache.assets = [...new Set([...css, ...img, ...others])];
        const inputs = this.cache.input.reduce(
            reduceToRecord(this.options.srcDir),
            this.cache.inputObj);
        return inputs;
    }

     transform(context, code, id, ssr) {
        const { code:updatedCode, imports } = this.backgroundProcessor.resolveDynamicImports(context, code);
        this.cache.dynamicImportContentScripts.push(...imports);
        return updatedCode;
    }

     isDynamicImportedContentScript(referenceId) {
        return this.cache.dynamicImportContentScripts.includes(referenceId);
    }

    /**
     * Add watch files
     * @param context Rollup Plugin Context
     */
     addWatchFiles(context) {
        // watch manifest.json file
        context.addWatchFile(this.options.manifestPath);
        // watch asset files
        this.cache.assets.forEach(srcPath => context.addWatchFile(srcPath));
    }

     async emitFiles(context) {
        // Copy asset files
        const assets = await Promise.all(
            this.cache.assets.map(async (srcPath) => {
                const source = await this.readAssetAsBuffer(srcPath);
                return {
                    type: "asset" ,
                    source,
                    fileName: path.relative(this.options.srcDir, srcPath),
                };
            }),
        );
        assets.forEach((asset) => {
            context.emitFile(asset);
        });
    }

     clearCacheById(id) {
        if (id.endsWith(manifestName)) {
            // Dump cache.manifest if manifest changes
            delete this.manifest;
            this.cache.assetChanged = false;
        } else {
            // Force new read of changed asset
            this.cache.assetChanged = this.cache.readFile.delete(id);
        }
    }

     async generateBundle(context, bundle) {
        if (!this.manifest) { throw new Error("[generate bundle] Manifest cannot be empty"); }
        /* ----------------- GET CHUNKS -----------------*/
        const chunks = getChunk(bundle);
        getAssets(bundle);
        /* ----------------- UPDATE PERMISSIONS ----------------- */
        this.permissionProcessor.derivePermissions(context, chunks, this.manifest);
        /* ----------------- UPDATE CONTENT SCRIPTS ----------------- */
        await this.contentScriptProcessor.generateBundle(context, bundle, this.manifest);
        await this.contentScriptProcessor.generateBundleFromDynamicImports(context, bundle, this.cache.dynamicImportContentScripts);
        /* ----------------- SETUP BACKGROUND SCRIPTS ----------------- */
        await this.backgroundProcessor.generateBundle(context, bundle, this.manifest);
        /* ----------------- SETUP ASSETS IN WEB ACCESSIBLE RESOURCES ----------------- */

        /* ----------------- STABLE EXTENSION ID ----------------- */
        /* ----------------- OUTPUT MANIFEST.JSON ----------------- */
        /* ----------- OUTPUT MANIFEST.JSON ---------- */
        this.generateManifest(context, this.manifest);
        // validate manifest
        this.validateManifest();
    }

     resolveManifestPath(options) {
        if (!options.input) {
            console.log(chalk__default['default'].red("No input is provided."));
            throw new Error("No input is provided.")
        }
        let inputManifestPath;
        if (Array.isArray(options.input)) {
            const manifestIndex = options.input.findIndex(i => path.basename(i) === "manifest.json");
            if (manifestIndex > -1) {
                inputManifestPath = options.input[manifestIndex];
                this.cache.inputAry = options.input.splice(manifestIndex, 1);
            } else {
                console.log(chalk__default['default'].red("RollupOptions.input array must contain a Chrome extension manifest with filename 'manifest.json'."));
                throw new Error("RollupOptions.input array must contain a Chrome extension manifest with filename 'manifest.json'.");
            }
        } else if (typeof options.input === "object") {
            if (options.input.manifest) {
                inputManifestPath = options.input.manifest;
                delete options.input["manifest"];
                this.cache.inputObj = cloneObject(options.input);
            } else {
                console.log(chalk__default['default'].red("RollupOptions.input object must contain a Chrome extension manifest with Key manifest."));
                throw new Error("RollupOptions.input object must contain a Chrome extension manifest with Key manifest.");
            }
        } else {
            inputManifestPath = options.input;
            delete options.input;
        }
        /* --------------- VALIDATE MANIFEST.JSON PATH --------------- */
        if (path.basename(inputManifestPath) !== "manifest.json") {
            throw new TypeError("Input for a Chrome extension manifest must have filename 'manifest.json'.");
        }
        return inputManifestPath;
    }

     validateManifestContent(config) {
        if (config.isEmpty) {
            throw new Error(`${config.filepath} is an empty file.`);
        }
        const { options_page, options_ui } = config.config;
        if (
            options_page !== undefined &&
            options_ui !== undefined
        ) {
            throw new Error(
                "options_ui and options_page cannot both be defined in manifest.json.",
            );
        }
    }

     validateManifest() {
        if (this.manifest) {
            validateManifest(this.manifest);
        } else {
            throw new Error("Manifest cannot be empty");
        }
    }

     applyExternalManifestConfiguration(
        config
    ) {
        if (typeof this.options.extendManifest === "function") {
            return this.options.extendManifest(config.config);
        } else if (typeof this.options.extendManifest === "object") {
            return {
                ...config.config,
                ...this.options.extendManifest,
            };
        } else {
            return config.config;
        }
    }

     __init2() {this.readAssetAsBuffer = memoize__default['default'](
        (filepath) => {
            return fs__default['default'].readFile(filepath);
        },
        {
            cache: this.cache.readFile,
        },
    );}

     generateManifest(
        context,
        manifest,
    ) {
        const manifestJson = JSON.stringify(manifest, null, 4)
            // SMELL: is this necessary?
            .replace(/\.[jt]sx?"/g, '.js"');
        // Emit manifest.json
        context.emitFile({
            type: "asset",
            fileName: manifestName,
            source: manifestJson,
        });
    }
}

const isHtml = (path) => /\.html?$/.test(path);

class HtmlProcessor {
     __init() {this.cache = {
        scripts: [],
        html: [],
        html$: [],
        js: [],
        css: [],
        img: [],
        input: [],
    }; }

    constructor( options) {this.options = options;HtmlProcessor.prototype.__init.call(this); }

     resolveInput(input) {
        // srcDir may be initialized by another plugin
        const { srcDir } = this.options;
        if (srcDir) {
            this.cache.srcDir = srcDir;
        } else {
            throw new TypeError("options.srcDir not initialized");
        }

        // Skip if cache.input exists
        // cache is dumped in watchChange hook

        // Flatten input to array
        const inputArray = flattenRollupInput(input);

        /* ------------------------------------------------- */
        /*                 HANDLE HTML FILES                 */
        /* ------------------------------------------------- */

        // Filter htm and html files
        this.cache.html = inputArray.filter(isHtml);

        // If no html files, do nothing
        if (this.cache.html.length === 0) return input;

        // If the cache has been dumped, reload from files
        if (this.cache.html$.length === 0) {
            // This is all done once
            this.cache.html$ = this.cache.html.map(loadHtml(srcDir));
            this.cache.js = flatten__default['default'](this.cache.html$.map(getScriptSrc));
            this.cache.css = flatten__default['default'](this.cache.html$.map(getCssHrefs));
            this.cache.img = flatten__default['default'](this.cache.html$.map(getImgSrcs));
            this.cache.scripts = flatten__default['default'](this.cache.html$.map(getJsAssets));

            // Remove HTML files from input
            // Cache jsEntries with existing input
            this.cache.input = inputArray.filter(not(isHtml)).concat(this.cache.js);

            if (this.cache.input.length === 0) {
                throw new Error("At least one HTML file must have at least one script.");
            }
        }

        // - Parse HTML and emit chunks and assets in buildStart
        return this.cache.input.reduce(reduceToRecord(srcDir), {});
    }

     addWatchFiles(context) {
        [
            ...this.cache.css,
            ...this.cache.img,
            ...this.cache.scripts,
            ...this.cache.html,
        ].concat(this.cache.html).forEach((asset) => {
            context.addWatchFile(asset);
        });
    }

     generateBundle(context, bundle) {
        if (!this.options.srcDir) { throw new TypeError("[html] options.srcDir not initialized"); }
        const chunks = Object.values(bundle).filter(isChunk);

        this.cache.html$.map($ => this.replaceImportScriptPath($, chunks, this.options.srcDir, this.options.browserPolyfill))
            .map($ => {
                const source = formatHtml($);
                const fileName = path.relative(this.options.srcDir, $.filePath);
                context.emitFile({
                    type: "asset",
                    source,
                    fileName,
            });
        });
    }

    /**
     * Output asset files in html
     * css, img, script(not local import)
     */
     async emitFiles(context) {
        const assets = [
            ...this.cache.css,
            ...this.cache.img,
            ...this.cache.scripts,
        ];
        const emitting = assets.map(async (asset) => {
            // Read these files as Buffers
            const source = await fs.readFile(asset);
            const fileName = path.relative(this.options.srcDir, asset);
            context.emitFile({
                type: "asset",
                source, // Buffer
                fileName,
            });
        });
        await Promise.all(emitting);
    }

     clearCacheById(id) {
        if (id.endsWith(".html") || id.endsWith("manifest.json")) {
            // Dump cache if html file or manifest changes
            this.cache.html$ = [];
        }
    }

     replaceImportScriptPath(
        $,
        chunks,
        srcDir,
        browserPolyfill,
    ) {
        getScriptElems($)
            .attr("type", "module")
            .attr("src", (i, value) => {
                const basePath = path.dirname($.filePath);
                const chunkName = getOutputFilenameFromChunk(path.resolve(basePath, value ), chunks);
                return path.relative(basePath, path.resolve(srcDir, chunkName));
            });

        if (browserPolyfill) {
            const head = $("head");
            if (
                browserPolyfill === true ||
                (typeof browserPolyfill === "object" &&
                    browserPolyfill.executeScript)
            ) {
                head.prepend(
                    '<script src="/assets/browser-polyfill-executeScript.js"></script>',
                );
            }

            head.prepend(
                '<script src="/assets/browser-polyfill.js"></script>',
            );
        }

        return $;
    }
}

const code$1 = "(function () {\n  'use strict';\n\n  /* ------------------- FILENAMES ------------------- */\r\n\r\n  /* ------------------ PLACEHOLDERS ----------------- */\r\n\r\n  const timestampPathPlaceholder = \"%TIMESTAMP_PATH%\";\r\n  const loadMessagePlaceholder = \"%LOAD_MESSAGE%\";\r\n  const ctScriptPathPlaceholder = \"%CONTENT_SCRIPT_PATH%\";\r\n  const unregisterServiceWorkersPlaceholder = \"%UNREGISTER_SERVICE_WORKERS%\";\r\n  const executeScriptPlaceholder = \"%EXECUTE_SCRIPT%\";\n\n  /* eslint-env browser */\r\n\r\n  // Log load message to browser dev console\r\n  console.log(loadMessagePlaceholder.slice(1, -1));\r\n\r\n  const options = {\r\n    executeScript: JSON.parse(executeScriptPlaceholder),\r\n    unregisterServiceWorkers: JSON.parse(\r\n      unregisterServiceWorkersPlaceholder,\r\n    ),\r\n  };\r\n\r\n  /* ---------- POLYFILL TABS.EXECUTESCRIPT ---------- */\r\n\r\n  if (options.executeScript) {\r\n    const markerId =\r\n      'rollup-plugin-chrome-extension-simple-reloader';\r\n\r\n    const addMarker = `{\r\n    const tag = document.createElement('meta');\r\n    tag.id = '${markerId}';\r\n    document.head.append(tag);\r\n  }`;\r\n\r\n    const checkMarker = `\r\n  !!document.head.querySelector('#${markerId}')\r\n  `;\r\n\r\n    // Modify chrome.tabs.executeScript to inject reloader\r\n    const _executeScript = chrome.tabs.executeScript;\r\n    const withP = (...args) =>\r\n      new Promise((resolve, reject) => {\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        _executeScript(...args, (results) => {\r\n          if (chrome.runtime.lastError) {\r\n            reject(chrome.runtime.lastError.message);\r\n          } else {\r\n            resolve(results);\r\n          }\r\n        });\r\n      });\r\n\r\n    chrome.tabs.executeScript = (...args) => {\r\n  (async () => {\r\n        const tabId = typeof args[0] === 'number' ? args[0] : null;\r\n        const argsBase = (tabId === null ? [] : [tabId]); \r\n\r\n        const [done] = await withP(\r\n          ...(argsBase.concat({ code: checkMarker }) \r\n\r\n\r\n  ),\r\n        );\r\n\r\n        // Don't add reloader if it's already there\r\n        if (!done) {\r\n          await withP(\r\n            ...(argsBase.concat({ code: addMarker }) \r\n\r\n\r\n  ),\r\n          );\r\n\r\n          // execute reloader\r\n          const reloaderArgs = argsBase.concat([\r\n            // TODO: convert to file to get replacements right\r\n            { file: JSON.parse(ctScriptPathPlaceholder) },\r\n          ]); \r\n\r\n          await withP(...reloaderArgs);\r\n        }\r\n\r\n        _executeScript(...(args ));\r\n      })();\r\n    };\r\n  }\r\n\r\n  /* ----------- UNREGISTER SERVICE WORKERS ---------- */\r\n\r\n  if (options.unregisterServiceWorkers) {\r\n    // Modify chrome.runtime.reload to unregister sw's\r\n    const _runtimeReload = chrome.runtime.reload;\r\n    chrome.runtime.reload = () => {\r\n  (async () => {\r\n        await unregisterServiceWorkers();\r\n        _runtimeReload();\r\n      })();\r\n    };\r\n  }\r\n\r\n  async function unregisterServiceWorkers() {\r\n    try {\r\n      const registrations = await navigator.serviceWorker.getRegistrations();\r\n      await Promise.all(registrations.map((r) => r.unregister()));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /* -------------- CHECK TIMESTAMP.JSON ------------- */\r\n\r\n  let timestamp;\r\n\r\n  const id = setInterval(async () => {\r\n    const t = await fetch(timestampPathPlaceholder)\r\n      .then((res) => {\r\n        localStorage.removeItem('chromeExtensionReloaderErrors');\r\n        return res.json()\r\n      })\r\n      .catch(handleFetchError);\r\n\r\n    if (typeof timestamp === 'undefined') {\r\n      timestamp = t;\r\n    } else if (timestamp !== t) {\r\n      chrome.runtime.reload();\r\n    }\r\n\r\n    function handleFetchError(error) {\r\n      clearInterval(id);\r\n\r\n      const errors =\r\n        localStorage.chromeExtensionReloaderErrors || 0;\r\n\r\n      if (errors < 5) {\r\n        localStorage.chromeExtensionReloaderErrors = errors + 1;\r\n\r\n        // Should reload at least once if fetch fails.\r\n        // The fetch will fail if the timestamp file is absent,\r\n        // thus the new build does not include the reloader\r\n        return 0\r\n      } else {\r\n        console.log(\r\n          'rollup-plugin-chrome-extension simple reloader error:',\r\n        );\r\n        console.error(error);\r\n\r\n        return timestamp\r\n      }\r\n    }\r\n  }, 1000);\n\n}());\n";

const code = "(function () {\n  'use strict';\n\n  /* ------------------- FILENAMES ------------------- */\r\n  const loadMessagePlaceholder = \"%LOAD_MESSAGE%\";\n\n  /* eslint-env browser */\r\n\r\n  // Log load message to browser dev console\r\n  console.log(loadMessagePlaceholder.slice(1, -1));\r\n\r\n  const { name } = chrome.runtime.getManifest();\r\n\r\n  const reload = () => {\r\n    console.log(`${name} has reloaded...`);\r\n\r\n    setTimeout(() => {\r\n      location.reload();\r\n    }, 500);\r\n  };\r\n\r\n  setInterval(() => {\r\n    try {\r\n      chrome.runtime.getManifest();\r\n    } catch (error) {\r\n      if (error.message === \"Extension context invalidated.\") {\r\n        reload();\r\n      }\r\n    }\r\n  }, 1000);\n\n}());\n";

/* ------------------- FILENAMES ------------------- */

const backgroundPageReloader = "background-page-reloader.js";
const contentScriptReloader = "content-script-reloader.js";
const timestampFilename = "timestamp.json";

/* ------------------ PLACEHOLDERS ----------------- */

const timestampPathPlaceholder = "%TIMESTAMP_PATH%";
const loadMessagePlaceholder = "%LOAD_MESSAGE%";
const ctScriptPathPlaceholder = "%CONTENT_SCRIPT_PATH%";
const unregisterServiceWorkersPlaceholder = "%UNREGISTER_SERVICE_WORKERS%";
const executeScriptPlaceholder = "%EXECUTE_SCRIPT%";

function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }


















// Used for testing
const _internalCache = {};

const simpleReloader = (
    {
        executeScript = true,
        unregisterServiceWorkers = true,
    } = {} ,
    cache = {} ,
) => {
    if (!process.env.ROLLUP_WATCH) {
        return undefined;
    }

    return {
        name: "chrome-extension-simple-reloader",

        generateBundle({ dir }, bundle) {
            const date = new Date();
            const time = `${date
                .getFullYear()
                .toString()
                .padStart(2, "0")}-${(date.getMonth() + 1)
                    .toString()
                    .padStart(2, "0")}-${date
                        .getDate()
                        .toString()
                        .padStart(2, "0")} ${date
                            .getHours()
                            .toString()
                            .padStart(2, "0")}:${date
                                .getMinutes()
                                .toString()
                                .padStart(2, "0")}:${date
                                    .getSeconds()
                                    .toString()
                                    .padStart(2, "0")}`;

            cache.outputDir = dir;
            cache.loadMessage = [
                "DEVELOPMENT build with simple auto-reloader",
                `[${time}] waiting for changes...`,
            ].join("\n");

            /* --------------- EMIT CLIENT FILES --------------- */

            const emit = (
                name,
                source,
                isFileName,
            ) => {
                const id = this.emitFile({
                    type: "asset",
                    [isFileName ? "fileName" : "name"]: name,
                    source,
                });

                return this.getFileName(id);
            };

            cache.timestampPath = emit(
                timestampFilename,
                JSON.stringify(Date.now()),
                true,
            );

            cache.ctScriptPath = emit(
                contentScriptReloader,
                code.replace(
                    loadMessagePlaceholder,
                    JSON.stringify(cache.loadMessage),
                ),
            );

            cache.bgScriptPath = emit(
                backgroundPageReloader,
                code$1
                    .replace(timestampPathPlaceholder, cache.timestampPath)
                    .replace(
                        loadMessagePlaceholder,
                        JSON.stringify(cache.loadMessage),
                    )
                    .replace(
                        ctScriptPathPlaceholder,
                        JSON.stringify(cache.ctScriptPath),
                    )
                    .replace(
                        executeScriptPlaceholder,
                        JSON.stringify(executeScript),
                    )
                    .replace(
                        unregisterServiceWorkersPlaceholder,
                        JSON.stringify(unregisterServiceWorkers),
                    ),
            );

            // Update the exported cache
            Object.assign(_internalCache, cache);

            /* ---------------- UPDATE MANIFEST ---------------- */

            updateManifest(
                (manifest) => {
                    /* ------------------ DESCRIPTION ------------------ */

                    manifest.description = cache.loadMessage;

                    /* ---------------- BACKGROUND PAGE ---------------- */

                    if (!manifest.background) {
                        manifest.background = {};
                    }

                    manifest.background.persistent = true;

                    const { scripts: bgScripts = [] } = manifest.background;

                    if (cache.bgScriptPath) {
                        manifest.background.scripts = [
                            cache.bgScriptPath,
                            ...bgScripts,
                        ];
                    } else {
                        this.error(
                            `cache.bgScriptPath is ${typeof cache.bgScriptPath}`,
                        );
                    }

                    /* ---------------- CONTENT SCRIPTS ---------------- */

                    const { content_scripts: ctScripts } = manifest;

                    if (cache.ctScriptPath) {
                        manifest.content_scripts = _optionalChain([ctScripts, 'optionalAccess', _ => _.map, 'call', _2 => _2(
                            ({ js = [], ...rest }) => ({
                                js: [cache.ctScriptPath, ...js],
                                ...rest,
                            }),
                        )]);
                    } else {
                        this.error(
                            `cache.ctScriptPath is ${typeof cache.ctScriptPath}`,
                        );
                    }

                    return manifest;
                },
                bundle,
                this.error,
            );

            // We'll write this file ourselves, we just need a safe path to write the timestamp
            delete bundle[cache.timestampPath];
        },

        /* -------------- WRITE TIMESTAMP FILE ------------- */
        async writeBundle() {
            try {
                await fs.outputJson(
                    path.join(cache.outputDir, cache.timestampPath),
                    Date.now(),
                );
            } catch (err) {
                if (typeof err.message === "string") {
                    this.error(
                        `Unable to update timestamp file:\n\t${err.message}`,
                    );
                } else {
                    this.error("Unable to update timestamp file");
                }
            }
        },
    };
};

const stubChunkName = "stub__empty-chrome-extension-manifest";

const chromeExtension = (
    options = {} ,
) => {
    /* --------------- LOAD PACKAGE.JSON --------------- */
    try {
        const packageJsonPath = path.join(process.cwd(), "package.json");
        options.pkg = options.pkg || fs.readJSONSync(packageJsonPath);
    } catch (error) { }

    /* ----------------- SETUP PLUGINS ----------------- */
    const normalizedOptions = { ...options } ;
    const manifest2 = manifestInput(options);
    const html2 = htmlInputs(normalizedOptions );
    const manifestProcessor = new ManifestProcessor(normalizedOptions);
    const htmlProcessor = new HtmlProcessor(normalizedOptions);
    const validate = validateNames();

    /* ----------------- RETURN PLUGIN ----------------- */
    return {
        name: "chrome-extension",
        // For testing
        _plugins: { manifest: manifest2, html: html2, validate },
        configResolved(config) {
        },
        async options(options) {
            // Do not reload manifest without changes
            if (!manifestProcessor.manifest) {
                manifestProcessor.load(options);
                options.input = manifestProcessor.resolveInput(options.input);
            }
            // resolve scripts and assets in html
            options.input = htmlProcessor.resolveInput(options.input);
            logger.logInputFiles(options.input);
            return options;
        },
        async buildStart() {
            manifestProcessor.addWatchFiles(this);
            htmlProcessor.addWatchFiles(this);
            await manifestProcessor.emitFiles(this);
            await htmlProcessor.emitFiles(this);
        },
        resolveId(source) {
            if (source === stubChunkName) {
                return source;
            }
            return null;
        },
        load(id) {
            if (id === stubChunkName) {
                return { code: `console.log("${stubChunkName}")` };
            }
            return null;
        },
        transform(code, id, ssr) {
            return manifestProcessor.transform(this, code, id, ssr);
        },
        watchChange(id) {
            manifestProcessor.clearCacheById(id);
            htmlProcessor.clearCacheById(id);
        },
        resolveFileUrl({ referenceId, fileName }) {
            if (manifestProcessor.isDynamicImportedContentScript(referenceId)) {
                return `"${slash__default['default'](fileName)}"`;
            }
            return null;
        },
        outputOptions(options) {
            return {
                ...options,
                chunkFileNames: "[name].[hash].js",
                assetFileNames: "[name].[hash].[ext]",
                entryFileNames: "[name].js"
            };
        },
        async generateBundle(options, bundle, isWrite) {
            await manifestProcessor.generateBundle(this, bundle);
            await htmlProcessor.generateBundle(this, bundle);
            // await validate.generateBundle.call(this, options, bundle, isWrite);
        },
    };
};

exports.chromeExtension = chromeExtension;
exports.simpleReloader = simpleReloader;
exports.stubChunkName = stubChunkName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
